library(shiny)
library(leaflet)
library(tmap)
library(tidyverse)
library(sf)
library(glue)
library(wrapr)



df_osm_amenities= readRDS('data/shiny/df_osm_amenities.rds')
df_osm_leisure= readRDS('data/shiny/df_osm_leisure.rds')
df_bars = readRDS('data/shiny/df_bars.rds')
df_best_location = readRDS('data/shiny/df_best_location.rds')
df_all_ts = readRDS('data/shiny/df_all_ts.rds')

df_best_location  %>%
  count( userid, night) %>% 
  mutate( n = sprintf( '%05f', n)) %>%
  mutate( id = paste(n, userid, night)) %>%
  arrange( desc( id )) %>%
  { . } -> df_people_nights 

list.files( path='data/', pattern='save.*rds', full.names=TRUE ) %>%
  enframe('id', 'filename') %>%
  select(-id ) %>%
  separate( col=filename, 
           into=c(NA, qc(min_staypoint_time, max_jump_time, max_staypoint_distance, max_speed_filter)), 
           sep='_', 
           extra='drop' ,
           remove=FALSE)  %>%
  mutate( desc = glue( 'sp_time:{min_staypoint_time}, max_jump_time:{max_jump_time}, max_dist:{max_staypoint_distance}, max_spd:{max_speed_filter}' )) %>% 
  { . } -> df_file_names


runApp(list(

      ui = fluidPage(
               titlePanel("Dusk2dawn paths"),
               sidebarLayout(
                     sidebarPanel(
                            selectInput("staypoint_algorithm", label = "Staypoint Algorithm", choices = df_file_names$desc),
                            selectInput("person_night", label = "person", choices = df_people_nights$id),
                            checkboxGroupInput("show_what", label = h3("Display?"), choices = list("OSM leisure" = 1, "OSM amenities" = 2, "4square bars" = 3))
                            ),
                     mainPanel(
                           leafletOutput("map")
                     )
               )
               ),

      server = function(input, output) {
        # generate the route 
        mscale = 0.5

        output$map = renderLeaflet( {
          readRDS( df_file_names %>% 
                  filter( desc== input$staypoint_algorithm )   %>%
                  pull(filename)
                ) %>%
            inner_join( df_people_nights %>% filter( id == input$person_night )) %>% 
            st_as_sf( coords = c("longitude", "latitude"), crs = 4326, agr = "constant")  %>%
            #  mutate( ts = as.numeric( cut(time_stamp, 8))) %>%
            #    filter( n_staypoint>0 ) %>%
            mutate( n_staypoint = as.factor( n_staypoint )) %>%
            mutate( size=ifelse( n_staypoint==0, 1, 1 )) %>%
            mutate( color = cut( time_stamp, 5)) %>%
            tm_shape()  + 
            tm_symbols(col = "color", shape = "n_staypoint", scale = mscale, size='size')  +
            tm_scale_bar(position=c("left", "bottom")) +
            tm_basemap(leaflet::providers$Stamen.TonerLite) %>% 
            { . } -> tm

          if (1 %in% input$show_what ) {
            tm <- tm + 
              tm_shape( df_osm_leisure$osm_points %>% filter( !is.na( leisure)) ) +
              tm_bubbles( col='black', scale=mscale, id='name')+
              tm_shape( df_osm_leisure$osm_polygon %>% filter( !is.na( leisure)) ) +
              tm_polygons( col='gray', id='name') 
          }
          if (2 %in% input$show_what ) {
            tm <- tm + 
              tm_shape( df_osm_amenities$osm_points %>% filter( !is.na( amenity)) ) +
              tm_bubbles( col='black', scale=mscale, id='name')+
              tm_shape( df_osm_amenities$osm_polygon %>% filter( !is.na( amenity)) ) +
              tm_polygons(col='black',  id='name')
          }
          if (3 %in% input$show_what ) {
            tm <- tm + 
              tm_shape( df_bars ) +
              tm_bubbles( col='red', scale=mscale, id='name') 
          }
          tmap_leaflet(tm)

         })
      }
      ))
